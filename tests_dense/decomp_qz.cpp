// Copyright (C) 2015 National ICT Australia (NICTA)
// 
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
// -------------------------------------------------------------------
// 
// Written by Conrad Sanderson - http://conradsanderson.id.au


#include <armadillo>
#include "catch.hpp"

using namespace arma;


TEST_CASE("decomp_qz_1")
  {
  mat A = 
    "\
     0.061198   0.201990   0.019678  -0.493936  -0.126745   0.051408;\
     0.437242   0.058956  -0.149362  -0.045465   0.296153   0.035437;\
    -0.492474  -0.031309   0.314156   0.419733   0.068317  -0.454499;\
     0.336352   0.411541   0.458476  -0.393139  -0.135040   0.373833;\
     0.239585  -0.428913  -0.406953  -0.291020  -0.353768   0.258704;\
    ";
  
  
  mat B = fliplr(A);
  
  mat A55 = A(0,0,size(5,5));
  mat B55 = B(0,0,size(5,5));
  
  mat AA;
  mat BB;
  mat Q;
  mat Z; 
  
  qz(AA, BB, Q, Z, A55, B55);  
  
  mat qz_AA =
    "\
    -0.118572576203126  -0.163670581163111  -0.169634519414907  -0.443785492408522   0.081553448285479;\
     0.000000000000000   0.612655671883840   0.481454861618631  -0.522512621138883   0.182264181302959;\
     0.000000000000000   0.000000000000000   0.452087109042364   0.002345830664128   0.569498462932488;\
     0.000000000000000   0.000000000000000   0.000000000000000  -0.517214217806654  -0.291221226081656;\
     0.000000000000000   0.000000000000000   0.000000000000000   0.000000000000000   0.591125566553678;\
    ";
  
  mat qz_BB = 
    "\
     0.118572576203126  -0.077465931943795   0.189608002888480   0.443785492408522   0.081553448285479;\
     0.000000000000000   0.573423514261191   0.317961832096431   0.522512621138883   0.182264181302959;\
     0.000000000000000   0.000000000000000   0.452087109042364  -0.002345830664128   0.569498462932488;\
     0.000000000000000   0.000000000000000   0.000000000000000   0.517214217806654  -0.291221226081656;\
     0.000000000000000   0.000000000000000   0.000000000000000   0.000000000000000   0.591125566553678;\
    ";
  
  mat qz_Q =
    "\
    -0.1725051102703641   0.9173424128139634   0.2011574458266637  -0.2938384689532796   0.0438123354199545;\
    -0.4372720007262580  -0.3741139507802266   0.6678635322828727  -0.4227269651642728   0.2099813429381621;\
     0.3889487911914786  -0.0506407340221146   0.2847823210073553  -0.3132473943064042  -0.8166574884799016;\
    -0.2412274969739266  -0.1245963319781115  -0.6529884115831349  -0.7040526117856118  -0.0648159157714170;\
    -0.7546941876322136   0.0208067200578917  -0.0774541684800454   0.3756951648401974  -0.5318437349968006;\
    ";
  
  mat qz_Z =
    "\
    -0.000000000000000  -0.233338257105986  -0.972395628214535   0.000000000000000   0.000000000000000;\
     0.612975742535787  -0.569810251477963   0.136732958379423   0.352506367407315   0.395752922166636;\
    -0.352506367407315   0.384828411367965  -0.092344297102964   0.612975742535787   0.585986027646196;\
     0.352506367407315   0.384828411367964  -0.092344297102964  -0.612975742535787   0.585986027646196;\
    -0.612975742535787  -0.569810251477963   0.136732958379423  -0.352506367407315   0.395752922166636;\
    ";
  
  REQUIRE( accu(abs(AA - qz_AA)) == Approx(0.0) );
  REQUIRE( accu(abs(BB - qz_BB)) == Approx(0.0) );
  
  REQUIRE( accu(abs(Q - qz_Q)) == Approx(0.0) );
  REQUIRE( accu(abs(Z - qz_Z)) == Approx(0.0) );
  
  REQUIRE( accu(abs(Q.t()*AA*Z.t() - A55)) == Approx(0.0) );
  REQUIRE( accu(abs(Q.t()*BB*Z.t() - B55)) == Approx(0.0) );
  
  REQUIRE_THROWS( qz(AA, BB, Q, Z, A, B) );
  }


TEST_CASE("decomp_qz_2")
  {
  mat A = 
    "\
     0.061198   0.201990   0.019678  -0.493936  -0.126745   0.051408;\
     0.437242   0.058956  -0.149362  -0.045465   0.296153   0.035437;\
    -0.492474  -0.031309   0.314156   0.419733   0.068317  -0.454499;\
     0.336352   0.411541   0.458476  -0.393139  -0.135040   0.373833;\
     0.239585  -0.428913  -0.406953  -0.291020  -0.353768   0.258704;\
    ";
  
  cx_mat X(A,fliplr(A));
  
  cx_mat Y = flipud(X);
  
  cx_mat X44 = X(0,0,size(4,4));
  cx_mat Y44 = Y(0,0,size(4,4));
  
  cx_mat AA;
  cx_mat BB;
  cx_mat Q;
  cx_mat Z; 
  
  qz(AA, BB, Q, Z, X44, Y44);  
  
  cx_mat qz_AA =
    {
    {cx_double( 0.844377186989164, +0.000000000000000), cx_double(-0.243240547700464, +0.087934798121803), cx_double( 0.341117690201346, +0.809701043302600), cx_double(-0.119269858972040, +0.113691718249597)},
    {cx_double( 0.000000000000000, +0.000000000000000), cx_double(-0.467372589740585, +0.000000000000000), cx_double(-0.174238603799239, -0.495959615759446), cx_double(-0.072750196661497, +0.323610894365910)},
    {cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.029170149211320, -0.543488773746250), cx_double( 0.337726440116981, +0.318372034811354)},
    {cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.602821402063454, +0.000000000000000)}
    
    };
  
  cx_mat qz_BB = 
    {
    {cx_double( 0.844377186989164, +0.000000000000000), cx_double(-0.298445674889512, +0.040835878531722), cx_double( 0.320302895609209, +0.785763178593431), cx_double(-0.083135012703856, +0.211461923939233)},
    {cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.467372589740585, +0.000000000000000), cx_double(-0.297300542909558, +0.337962080085669), cx_double(-0.199390363399041, -0.730678968819746)},
    {cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.412118499789208, +0.000000000000000), cx_double( 0.333341192677179, -0.475936579382952)},
    {cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.000000000000000, +0.000000000000000), cx_double( 0.602821402063454, +0.000000000000000)}
    };
  
  cx_mat qz_Q =
    {
    {cx_double(-1.25072065570959e-01, +4.48361384860827e-02), cx_double(-4.75150508439602e-01, +1.73735126570607e-02), cx_double( 6.96645671301639e-01, -2.11876894755525e-01), cx_double(-4.75150508439602e-01, +1.73735126570603e-02)},
    {cx_double( 2.85326885478139e-01, -4.98035820053878e-01), cx_double(-5.08006011154251e-01, -2.93037064558680e-01), cx_double( 3.04673837169476e-02, -4.76150616829246e-02), cx_double( 4.53632966746958e-01, +3.42971919700891e-01)},
    {cx_double( 5.15493118810541e-01, +6.22223781227508e-01), cx_double(-3.50892834976090e-01, +1.92343409118873e-01), cx_double( 4.77084058779262e-02, +6.36911206793721e-02), cx_double( 3.11940077097995e-01, -2.88692534230079e-01)},
    {cx_double(-2.89920693391885e-16, -1.63711434964451e-16), cx_double(-1.03102417452021e-02, -5.19385460962905e-01), cx_double(-1.86541676418314e-01, -6.52278381268349e-01), cx_double(-1.03102417452020e-02, -5.19385460962905e-01)}
    };
  
  cx_mat qz_Z =
    {
    {cx_double(-0.638277537423991, +0.440210380217276), cx_double( 0.578206570141324, +0.132958892387661), cx_double(-0.182760737629286, -0.115819749311502), cx_double( 0.000000000000000, -0.000000000000000)},
    {cx_double(-0.539527844138597, +0.101559577197793), cx_double(-0.490697113111732, -0.448442690360440), cx_double( 0.231373887750693, +0.029712404733553), cx_double( 0.214376840370063, +0.395394387554622)},
    {cx_double( 0.288481580852491, +0.111167855639848), cx_double( 0.253313028656149, +0.224137436894224), cx_double( 0.412766798042197, -0.296696469120757), cx_double(-0.026230000834144, +0.728643786069936)},
    {cx_double( 0.018534873694409, -0.038581185646740), cx_double( 0.166626986327464, +0.252873403404786), cx_double( 0.047230597472467, +0.798831422660852), cx_double( 0.483876151924425, +0.178773427219972)}
    };
  
  REQUIRE( accu(abs(AA - qz_AA)) == Approx(0.0) );
  REQUIRE( accu(abs(BB - qz_BB)) == Approx(0.0) );
  
  REQUIRE( accu(abs(Q - qz_Q)) == Approx(0.0) );
  REQUIRE( accu(abs(Z - qz_Z)) == Approx(0.0) );
  
  REQUIRE( accu(abs(Q.t()*AA*Z.t() - X44)) == Approx(0.0) );
  REQUIRE( accu(abs(Q.t()*BB*Z.t() - Y44)) == Approx(0.0) );
  
  // REQUIRE_THROWS(  );
  }


